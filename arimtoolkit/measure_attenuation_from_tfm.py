"""
Calculate L and T attenuation.

The wall attenuation is::

    RMS(wall)/RMS(ref_wall).

We determine the L and T attenuation by matching the model and experimental
wall attenuation.

Output
------
conf.d/31_block_attenuation.yaml

"""
import logging

import arim
import arim.ray
import scipy.optimize
import yaml

from . import common, tfm_walls

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logging.getLogger("arim").setLevel(logging.WARNING)


def measure_attenuation_from_tfm(
    dataset_name,
    save,
    use_multifreq=False,
    l_att_0=10.0,
    t_att_0=10.0,
    att_tol=0.01,
    ref_wall="backwall_LL",
    wall_l="backwall_LLLL",
    wall_t="backwall_LT",
):
    conf = arim.io.load_conf(dataset_name)
    root_dir = conf["root_dir"]

    grids, views = tfm_walls.wall_views(
        conf, use_line_grids=True, wall_keys={ref_wall, wall_l, wall_t}
    )
    arim.ray.ray_tracing(views.values())

    def _make_wall_att(frame, wall, ref_wall):
        tfm = arim.im.tfm.tfm_for_view(
            frame, grids[wall], views[wall], interpolation=common.TFM_FINE_INTERP
        )
        ref_tfm = arim.im.tfm.tfm_for_view(
            frame,
            grids[ref_wall],
            views[ref_wall],
            interpolation=common.TFM_FINE_INTERP,
        )
        return common.rms(tfm.res.ravel()) / common.rms(ref_tfm.res.ravel())

    # %% Experimental TFM
    frame = common.load_frame(conf, apply_filter=True, expand=True)
    exp_wall_att_l = _make_wall_att(frame, wall_l, ref_wall)
    exp_wall_att_t = _make_wall_att(frame, wall_t, ref_wall)

    # %% Determine L attenuation
    def l_att_score(l_att):
        l_att = l_att[0]
        conf["block_material"]["longitudinal_att"] = l_att
        model_frame = tfm_walls.make_model_walls(
            conf, use_multifreq, wall_keys={wall_l, ref_wall}
        )
        wall_att_l = _make_wall_att(model_frame, wall_l, ref_wall)
        return wall_att_l - exp_wall_att_l

    sol = scipy.optimize.root(l_att_score, l_att_0, method="hybr", tol=att_tol)
    logger.info(f"Root finding done in {sol.nfev} evals")
    if not sol.success:
        raise RuntimeError(f"Cannot determine L attenuation: {sol.message}")
    l_att_opt = sol.x[0]
    logger.info(f"L attenuation = {l_att_opt:.2f} Np/m")

    # %% Determine T attenuation from backwall LT
    def t_att_score(t_att):
        t_att = t_att[0]
        conf["block_material"]["longitudinal_att"] = l_att_opt
        conf["block_material"]["transverse_att"] = t_att
        model_frame = tfm_walls.make_model_walls(conf, use_multifreq)
        model_frame = tfm_walls.make_model_walls(
            conf, use_multifreq, wall_keys={wall_t, ref_wall}
        )
        wall_att_t = _make_wall_att(model_frame, wall_t, ref_wall)
        return wall_att_t - exp_wall_att_t

    sol = scipy.optimize.root(t_att_score, t_att_0, method="hybr", tol=att_tol)
    logger.info(f"Root finding done in {sol.nfev} evals")
    if not sol.success:
        raise RuntimeError(f"Cannot determine T attenuation: {sol.message}")
    t_att_opt = sol.x[0]
    logger.info(f"T attenuation = {t_att_opt:.2f} Np/m")

    # %% Save and exit
    if save:
        # Save attenuation as conf file
        block_conf = dict(
            longitudinal_att=float(l_att_opt), transverse_att=float(t_att_opt)
        )
        block_conf2 = dict(block_material=block_conf)

        with (root_dir / "conf.d/31_block_attenuation.yaml").open("w") as f:
            f.write("# generated by measure_attenuation_from_tfm.py\n")
            yaml.dump(block_conf2, f, default_flow_style=False)

    return l_att_opt, t_att_opt


if __name__ == "__main__":
    args = common.argparser(__doc__).parse_args()
    dataset_name = args.dataset_name
    save = args.save
    l_att_opt, t_att_opt = measure_attenuation_from_tfm(dataset_name, save)

    # For comparison:
    """
    l_att_opt, t_att_opt = measure_attenuation_from_tfm(
        dataset_name,
        save=False,
        ref_wall="frontwall",
        wall_l="backwall_LL",
        wall_t="backwall_LT",
    )
    """
