"""
Measure model scaling and reference amplitudes in TFM

The attenuation must have been calculated first.
The reference amplitude is defined as the RMS of the backwall LL.
The model scaling is so that::

    exp_ref_amp = model_scaling * model_ref_amp

Output
------
conf.d/21_model_scaling.yaml

"""
import logging

import arim
import arim.ray
import yaml

from . import common, tfm_walls

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def measure_model_scaling_from_tfm(dataset_name, save, use_multifreq=False):
    conf = arim.io.load_conf(dataset_name)
    root_dir = conf["root_dir"]

    grids, views = tfm_walls.wall_views(conf, use_line_grids=True)
    wall_key = "backwall_LL"
    grid = grids[wall_key]
    view = views[wall_key]
    arim.ray.ray_tracing([view])

    # %% Experimental TFM
    frame = common.load_frame(
        conf, apply_filter=True, expand=True, warn_if_fallback_vel=False
    )
    tfm = arim.im.tfm.tfm_for_view(
        frame, grid, view, interpolation=common.TFM_FINE_INTERP
    )
    exp_ref_amp = common.rms(tfm.res)
    logger.info(f"Experimental ref amp: {exp_ref_amp}")

    # %% Backwall model:
    model_frame = tfm_walls.make_model_walls(conf, use_multifreq=use_multifreq)
    tfm = arim.im.tfm.tfm_for_view(
        model_frame, grid, view, interpolation=common.TFM_FINE_INTERP
    )
    model_ref_amp = common.rms(tfm.res)
    logger.info(f"Model ref amp: {model_ref_amp}")

    model_scaling = exp_ref_amp / model_ref_amp
    logger.info(f"Model scaling: {model_scaling}")

    model_conf = {
        "model": {
            "scaling": float(model_scaling),
            "reference_amplitude": float(model_ref_amp),
        },
        "experimental": {"reference_amplitude": float(exp_ref_amp)},
    }

    if save:
        with (root_dir / "conf.d/21_model_scaling.yaml").open("w") as f:
            f.write("# generated by measure_model_scaling_from_tfm\n")
            yaml.dump(model_conf, f, default_flow_style=False)
    return model_scaling


if __name__ == "__main__":
    args = common.argparser(__doc__).parse_args()
    dataset_name = args.dataset_name
    save = args.save
    model_scaling = measure_model_scaling_from_tfm(dataset_name, save)
