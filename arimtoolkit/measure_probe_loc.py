"""
Calculate the probe location from the frontwall arrival times.

Output
------
{dataset_name}/conf_d/10probe_loc.yaml

figures : bscan, frontwall_detect

"""
import logging

import arim
import arim.signal
import arim.plot as aplt
import matplotlib.pyplot as plt
import yaml
import numpy as np

from . import common

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# %%
def measure_probe_location(dataset_name, save=False, noshow=False):
    # %%
    conf = arim.io.load_conf(dataset_name)

    logger.info(f"dataset_name: {dataset_name}")

    frame = common.load_frame(
        conf, apply_filter=True, expand=False, warn_if_fallback_vel=False
    )
    result_dir = conf["result_dir"]

    # Prepare
    frame = frame.apply_filter(arim.signal.Abs())

    plt.figure()
    plt.plot(frame.time.samples, frame.scanlines[0])
    plt.gca().yaxis.set_major_formatter(aplt.micro_formatter)
    plt.title(f"{dataset_name}\nA-scan")

    # plot bscan
    ax, imag = aplt.plot_bscan_pulse_echo(
        frame, clim=[-40, 0], filename=str(result_dir / "bscan"), savefig=save
    )

    # Detect frontwall:
    probe_standoff, probe_angle, time_to_surface = arim.measurement.find_probe_loc_from_frontwall(
        frame, frame.examination_object.couplant_material, tmin=10e-6, tmax=None
    )

    plt.figure()
    plt.plot(time_to_surface[frame.tx == frame.rx])
    plt.xlabel("element")
    plt.ylabel("time (Âµs)")
    plt.gca().yaxis.set_major_formatter(aplt.micro_formatter)
    plt.gca().yaxis.set_minor_formatter(aplt.micro_formatter)
    plt.title(f"{dataset_name}\ntime between elements and frontwall - must be a line!")
    if save:
        plt.savefig(str(result_dir / "frontwall_detection"))

    new_conf = dict(
        probe_location={
            "standoff": probe_standoff.tolist(),
            "angle_deg": np.rad2deg(probe_angle).tolist(),
        }
    )

    conf_file = conf["root_dir"] / "conf.d/10probe_loc.yaml"
    if save:
        with conf_file.open("w", encoding="utf8") as stream:
            stream.write("# generated by measure_probe_loc.py\n")
            yaml.dump(dict(new_conf), stream=stream, default_flow_style=False)

    if noshow:
        plt.close("all")
    else:
        plt.show()


if __name__ == "__main__":
    args = common.argparser(__doc__).parse_args()

    if args.dataset_name == "*":
        for dataset_name in common.all_datasets():
            measure_probe_location(dataset_name, args.save, noshow=args.noshow)
            # plt.close('all')
    else:
        measure_probe_location(args.dataset_name, args.save, noshow=args.noshow)
